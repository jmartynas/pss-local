---
- name: Create a new Demo EC2 instance
  hosts: localhost
  gather_facts: False

  vars:
      region: us-east-1
      instance_type: t2.micro
      ami: ami-0ff8a91507f77f867 # Ubuntu 16.04 LTS
      keypair: Mumbai # pem file name
      master_tag: Master
      slave_tag: Slave
  
  tasks:
    - name: Create an ec2 instance
      ec2:
         key_name: "{{ keypair }}"
         group: default  # security group name
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         exact_count: 1
         #count: 1  # default
         count_tag:
            Name: "{{ item }}"
         instance_tags:
            Name: "{{ item }}"
         vpc_subnet_id: subnet-0f4c7c58d2bd31d55
      register: ec2_+"{{ item }}"
      with_items: 
        - "{{ master_tag }}"
        - "{{ slave_tag }}"
    

    - name: Gather Master EC2 Details
      ec2_instance_facts:
        ec2_region: "{{ region }}"
        filters:
          instance-state-name: running
          "tag:Name": "{{ master_tag }}"
      register: master_details

    - debug:
        var: master_details    

    - name: Gather Slave EC2 Details
      ec2_instance_facts:
        ec2_region: "{{ region }}"
        filters:
          instance-state-name: running
          "tag:Name": "{{ slave_tag }}"
      register: slave_details
    
    - name: Add new instance to Master host group
      add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: Master
      with_items: "{{ master_details.instances }}"

    - name: Add new instance to Slave host group
      add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: Slave
      with_items: "{{ slave_details.instances }}"
    
    - name: Wait for SSH to come up on Master
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 10
        timeout: 320
      with_items: "{{ master_details.instances }}"
    
    - name: Wait for SSH to come up on Slave
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 3
        timeout: 320
      with_items: "{{ slave_details.instances }}"
    

- name: Prepare hosts for MySql Master slave replication
  hosts: all
  gather_facts: True
  become: True
  
  tasks:
    - name: Install yum packages using a list
      yum:
        state: present
        name: 
          - docker
          - git
          - python-pip
          - mysql
  
    - name: Run Docker
      service:
        name: docker
        state: started
        
    - name: Installing docker compose
      pip:
        name: docker-compose
        version: 1.22.0
        state: present

    - name: Clone the git repository
      git:
        repo: 'https://github.com/SatishNaidi/mysql-master-slave.git'
        dest: /opt/mysql-replication
      register: response
    
    - name:  Git Run Response
      debug:
        var: response  

- name: Configure Master instance
  hosts: Master
  gather_facts: False
  become: True


  tasks:
    - name: Run Docker Compose
      shell: "/usr/local/bin/docker-compose -f master-docker-compose.yml up -d"
      args:
        chdir: /opt/mysql-replication
    - name: Get the Master Host
      set_fact:
        master_node={{ ansible_nodename }}
    - name: print Master
      debug:
        var: master_node
    - copy:
        content: "{{ master_node }}"
        dest: /opt/mysql-replication/Master.txt
    - fetch:
        src: /opt/mysql-replication/Master.txt
        dest: Master.txt
        flat: yes
    
    # - name:  Get MySQL Version
    #   command: echo docker exec mysql_master sh -c "mysql -P "{{ M_PORT }}" -u"{{ M_ROOT_USERNAME }}" -p"{{ M_ROOT_PASSWORD }}" "{{ M_DATABASE }}" -Ns -e 'SELECT VERSION()'"
    #   register: master_my_sql_version
    # - debug:
    #   var: master_my_sql_version
    # - name: Creating Privileged Statemenet
    #   set_fact:
    #     priv_stmt="GRANT REPLICATION SLAVE ON *.* TO \\\'{{S_USER}}\\\'@\\\'%\\\' IDENTIFIED BY \\\'{{ S_PASSWORD }}\\\'; FLUSH PRIVILEGES;"
    # - name: Print Priv_stmt
    #   debug:
    #     var: priv_stmt
    #     # one_fact="something" other_fact="{{ local_var }}"
    # - name:  Execute Privi Statement
    #   command: docker exec mysql_master sh -c "mysql -P "{{ M_PORT }}" -u"{{ M_ROOT_USERNAME }}" -p"{{ M_ROOT_PASSWORD }}" "{{ M_DATABASE }}" -Ns -e 'SELECT 'some text''"
    #   register: priv
    # - name: Print priv
    #   debu:g
    #     var: priv


- name: Configure Slave My SQL
  hosts: Slave
  gather_facts: True
  become: True
  vars:
     master_node : "{{ lookup('file', 'Master.txt') }}"
  tasks:
    - name: Run Docker Compose
      shell: "/usr/local/bin/docker-compose -f slave-docker-compose.yml up -d"
      args:
        chdir: /opt/mysql-replication
    - name: Get the Master Host
      set_fact:
        slave_node={{ ansible_nodename }}
    - name: print Slave
      debug:
        var: slave_node

    # - name: This command will change the working directory to somedir/ and will only run when /path/to/database doesn't exist.
    #   command: create_cluster.sh f00bar "{{ slave_node }}"  {{master_node}}
    #   args:
    #     executable: /bin/bash
    #     chdir: /opt/mysql-replication
    #   register:
    #     out
    # - debug:
    #     var: out

        

    # - name: Setup MySql Master Slave Replication
    #   script: sh test.sh root f00bar "{{ slave_node }}"  "{{master_node}}"
    #   args:
    #     executable: /bin/bash
    #     chdir: /opt/mysql-replication

    - name: Setup MySql Master Slave Replication
      script: "./create_cluster.sh root f00bar {{master_node}} {{ slave_node }}"
      args:
        executable: /bin/bash
        chdir: /opt/mysql-replication
      register: output
    - debug:
        var: output
